{"version":3,"sources":["components/UI/Backdrop/Backdrop.module.css","components/UI/Loader/Loader.module.css","components/UI/Input/Input.module.css","components/UI/Backdrop/Backdrop.jsx","components/UI/Modal/Modal.jsx","components/UI/Input/Input.jsx","components/UI/Button/Button.jsx","components/UI/Loader/Loader.jsx","dataService/dataService.js","components/ContactData/ContactData.jsx","App.jsx","serviceWorker.js","index.js","components/ContactData/ContactData.module.css","components/UI/Modal/Modal.module.css","components/UI/Button/Button.module.css"],"names":["module","exports","Backdrop","props","show","className","styles","onClick","click","Modal","classN","Away","join","backdropClick","children","Input","inputElement","inputClasses","InputElement","isValid","shouldValidate","isTouched","push","Invalid","inputType","value","onChange","change","inputConfig","inputconfig","console","log","Label","label","invalidMsg","InvalidMsg","Button","disabled","type","btnCliked","Loader","ldsSpinner","NotInitialized","ContactData","useState","msg","modal","setModal","backdropClickHandler","initialForm","name","placeholder","autoComplete","validation","isRequired","minLength","nameType","email","emailType","phone","maxLength","phoneType","zipCode","zipCodeType","comment","isFormValid","setIsFormValid","useReducer","state","action","newState","JSON","parse","stringify","input","payload","rules","trim","length","test","replace","checkValidity","Number","invalidationMessenger","form","checkIfFormIsValid","formData","dispatch","formInputs","key","event","inputChangeHandler","submitHandler","preventDefault","customerData","data","dataPlus","applicant","axios","post","then","res","catch","error","postData","response","status","e","target","Title","onSubmit","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.67ca2fce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__36FZg\",\"Away\":\"Backdrop_Away__3gaPF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsSpinner\":\"Loader_ldsSpinner__2LT0-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3V5bj\",\"Label\":\"Input_Label__32CUt\",\"InputElement\":\"Input_InputElement__3bFWF\",\"Invalid\":\"Input_Invalid__1NjRp\",\"InvalidMsg\":\"Input_InvalidMsg__1RIkE\"};","import React from 'react'\r\nimport styles from './Backdrop.module.css'\r\n\r\nexport const Backdrop = props => props.show ? \r\n    <div className={styles.Backdrop} onClick={props.click}></div> : null\r\n\r\n","import React from 'react'\r\nimport styles from './Modal.module.css'\r\nimport { Backdrop } from '../Index'\r\n\r\nexport const Modal = props => {\r\n    let classN = [styles.Modal, props.show ? null : styles.Away ].join(' ')\r\n    return (\r\n        <>\r\n            <Backdrop show={props.show} click={props.backdropClick}/>\r\n            <div className={classN}>\r\n                {props.children}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport styles from './Input.module.css'\r\n\r\nexport const Input = props => {\r\n    let inputElement = null\r\n    let inputClasses = [styles.InputElement]\r\n\r\n    if(!props.isValid && props.shouldValidate && props.isTouched) {\r\n        inputClasses.push(styles.Invalid)\r\n    } else {\r\n        inputClasses = [styles.InputElement]\r\n    }\r\n\r\n    switch ( props.inputType ) {\r\n        case ( 'input' ):\r\n            inputElement = <input \r\n                className={inputClasses.join(' ')} \r\n                value={props.value}\r\n                onChange={props.change}\r\n                {...props.inputConfig}/>\r\n            break;\r\n        case ( 'textarea' ):\r\n            inputElement = <textarea \r\n                className={inputClasses.join(' ')} \r\n                value={props.value}\r\n                onChange={props.change}\r\n                {...props.inputconfig}/>\r\n            break;\r\n        default:\r\n            console.log('Inveild input type')\r\n    }\r\n\r\n    return (\r\n        <div className={styles.Input}>\r\n            <label className={styles.Label}>{props.label}</label>\r\n            {inputElement}\r\n            {props.invalidMsg && <p className={styles.InvalidMsg}>{props.invalidMsg}</p>}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport styles from './Button.module.css';\r\n\r\n\r\nexport const Button = props => {\r\n    return (\r\n        <button \r\n            disabled={props.disabled}\r\n            className={[styles.Button, styles[props.type]].join(' ')} \r\n            onClick={props.btnCliked}>\r\n            {props.children}\r\n        </button>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport styles from './Loader.module.css'\r\n\r\nexport const Loader = () => {\r\n    return (\r\n        <div className={styles.ldsSpinner}><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n    )\r\n}\r\n\r\n\r\n","import axios from 'axios';\r\n// define and export fetching types\r\nexport const NotInitializedType = 'NotInitialized'\r\nexport const FetchingType = 'Fetching'\r\nexport const FetchedType = 'Fetched'\r\nexport const FailFetchedType = 'FailFetched'\r\n\r\nexport const NotInitialized = value => ({ type: NotInitializedType, value})\r\nexport const Fetching = value => ({ type: FetchingType, value})\r\nexport const Fetched = value => ({ type: FetchedType, value})\r\nexport const FailFetched = value => ({ type: FailFetchedType, value})\r\n\r\nexport const postData = data => {\r\n    const cors = 'https://cors-anywhere.herokuapp.com/' // go around CORS\r\n    const url = 'https://heksemel.no/case/submit.php' //   \"Access-Control-Allow-Origin\" needed on server side\r\n    // const url = 'https://jsonplaceholder.typicode.com/posts' // Fake Online REST API for Testing and Prototyping\r\n    const dataPlus = {...data, applicant: 'Marcin Sawczuk-Szymkiewicz'}\r\n   \r\n    return axios.post(`${cors}${url}`, dataPlus)\r\n        .then( res => Fetched(res.data))\r\n        .catch( error => FailFetched({...error}))\r\n}\r\n","import React, { useState, useReducer} from 'react'\r\nimport styles from './ContactData.module.css'\r\nimport { Input, Button, Modal, Loader } from '../UI/Index'\r\nimport { postData, NotInitialized, NotInitializedType, Fetching, FailFetchedType, FetchedType, FetchingType } from '../../dataService/dataService'\r\n\r\nexport const checkValidity = (value, rules) => {\r\n    let isValid = true;\r\n    if (rules.isRequired) {\r\n        isValid = value.trim() !== '' && isValid\r\n    }\r\n    if (rules.minLength) {\r\n        isValid = value.length >= rules.minLength && isValid\r\n    }\r\n    if (rules.maxLength) {\r\n        isValid = value.length <= rules.maxLength && isValid\r\n    }\r\n    if (rules.nameType) {\r\n        const re = /^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$/g\r\n        isValid = re.test(value) && isValid\r\n    }\r\n    if (rules.emailType) {\r\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n        isValid = re.test(value) && isValid\r\n    }\r\n    if (rules.phoneType) {\r\n        const re = /^((0047)?|(\\+47)?|(47)?)([- _1-9])(\\d{7})$/\r\n        isValid = re.test(value.replace(/\\s+/g, '')) && isValid\r\n    }\r\n    if (rules.zipCodeType) {\r\n        const re = /^(\\d{4})$/\r\n        isValid = re.test(value.replace(/\\s+/g, '')) && isValid\r\n    }\r\n    return isValid\r\n}\r\n\r\nconst ContactData = props => {\r\n    const [modal, setModal] = useState({...NotInitialized(''), msg: ''})\r\n    const backdropClickHandler = () => {\r\n        setModal({...NotInitialized(''), msg: ''})\r\n    }\r\n    const initialForm = {\r\n        name: {\r\n            inputType: 'input',\r\n            label: 'Navn',\r\n            inputConfig: {\r\n                type: 'text',\r\n                placeholder: 'Ole Alexander',\r\n                autoComplete: 'name'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                isRequired: true, \r\n                minLength: 2, \r\n                nameType: true\r\n            },\r\n            isValid: false,\r\n            isTouched: false\r\n        },\r\n        email: {\r\n            inputType: 'input',\r\n            label: 'E-post',\r\n            inputConfig: {\r\n                type: 'email',\r\n                placeholder: 'din.epost@yahoo.com',\r\n                autoComplete: 'email'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                isRequired: true,\r\n                minLength: 8, \r\n                emailType: true\r\n            },\r\n            isValid: false,\r\n            isTouched: false\r\n        },\r\n        phone: {\r\n            inputType: 'input',\r\n            label: 'Telefonnummer',\r\n            inputConfig: {\r\n                type: 'text',\r\n                placeholder: 'XXX XX XXX',\r\n                autoComplete: 'tel'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                isRequired: true,\r\n                minLength: 8,\r\n                maxLength: 12,\r\n                phoneType: true\r\n            },\r\n            isValid: false,\r\n            isTouched: false\r\n        },\r\n        zipCode: {\r\n            inputType: 'input',\r\n            label: 'Postnummer',\r\n            inputConfig: {\r\n                type: 'text',\r\n                placeholder: '1234',\r\n                autoComplete: 'postal-code'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                isRequired: true,\r\n                minLength: 4,\r\n                zipCodeType: true\r\n            },\r\n            isValid: false,\r\n            isTouched: false\r\n        },\r\n        comment: {\r\n            inputType: 'textarea',\r\n            label: 'Kommentar',\r\n            inputConfig: {\r\n                type: 'text',\r\n                placeholder: '',\r\n                autoComplete: 'off'\r\n            },\r\n            value: '',\r\n            isValid: true,\r\n            isTouched: false\r\n        }\r\n    }\r\n    \r\n    const invalidationMessenger = (value, rules) => {\r\n        let msg = ''\r\n        if (rules.nameType) {\r\n            msg = 'Må ha minst 2 bokstaver' //'Ikke gyldig navn'\r\n        }\r\n        if (rules.emailType) {\r\n            msg = 'E-post er ikke skrevet riktig'\r\n        }\r\n        if (rules.phoneType) {\r\n            msg = 'Må bestå av 8 siffer'\r\n            if(value.length === 8 && (Number(value[0]) === 0)) \r\n            msg = 'Kan ikke begynne med 0'\r\n        }\r\n        if (rules.zipCodeType) {\r\n            msg = 'Må bestå av 4 siffer'\r\n        }\r\n        if(value === '') {\r\n            msg = 'Må fylles ut'\r\n        }\r\n        return msg\r\n    }\r\n    const checkIfFormIsValid = (form) => {\r\n        let isValid = true\r\n        for(let input in form) {\r\n            if (form[input].validation) {\r\n                isValid = (form[input].isValid && isValid);\r\n            } \r\n        }\r\n        return isValid\r\n    }\r\n    const [isFormValid, setIsFormValid] = useState(false)\r\n\r\n    const formReducer = (state, action) => {\r\n        if( action.type === 'CLEAR' ) {\r\n            return initialForm\r\n        }\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        const input = newState[action.type] \r\n        input.value = action.payload\r\n        if ( input.validation ) {\r\n            input.isTouched = true\r\n            input.isValid = checkValidity(input.value, input.validation)\r\n            if ( !input.isValid ) {\r\n                input.invalidMsg = invalidationMessenger(input.value, input.validation)\r\n            } else {\r\n                input.invalidMsg = ''\r\n            }\r\n        }\r\n        setIsFormValid(checkIfFormIsValid(newState))\r\n        return newState    \r\n    }\r\n    const [formData, dispatch] = useReducer( formReducer, initialForm)\r\n\r\n    const formInputs = []\r\n    for (const input in formData) {\r\n        formInputs.push(\r\n            <Input \r\n                key={input}\r\n                shouldValidate={formData[input].validation}\r\n                change={(event) => inputChangeHandler(event, input)}\r\n                {...formData[input]}\r\n/*                 inputType={formData[input].inputType} \r\n                inputConfig={formData[input].inputConfig} \r\n                name={formData[input]}\r\n                label={formData[input].label}\r\n                invalidMsg={formData[input].invalidMsg}\r\n                value={formData[input].value}\r\n                change={(event) => inputChangeHandler(event, input)}\r\n                isValid={formData[input].isValid}\r\n                shouldValidate={formData[input].validation}\r\n                isTouched={formData[input].isTouched} */\r\n            />\r\n        )\r\n    }\r\n\r\n    const submitHandler = event => {\r\n        event.preventDefault()\r\n        if(!isFormValid) return ;\r\n        let customerData = {}\r\n        for (const key in formData) {\r\n            customerData[key] = formData[key].value\r\n        }\r\n        setModal(Fetching('data'))\r\n        postData(customerData)\r\n        .then( res => {\r\n            let msg = ''\r\n            if (res.type === FailFetchedType) {\r\n                msg = (\r\n                    <div>\r\n                    <h5>Ops, data ble ikke sent, error status er {res.value.response.status}</h5>\r\n                    <Button type='Danger' btnCliked={backdropClickHandler}>Tilbake</Button>\r\n                    </div>\r\n                )\r\n            } else if (res.type === FetchedType) {\r\n                msg = (\r\n                    <div>\r\n                        <h5>Din data ble sent</h5>\r\n                        <Button type='Success' btnCliked={backdropClickHandler}>Tilbake</Button>\r\n                    </div>\r\n                )\r\n            }\r\n            setModal({msg: msg})\r\n        })\r\n    }\r\n\r\n    const inputChangeHandler = ( e, inputType ) => {\r\n        e.preventDefault()\r\n        dispatch({type: inputType , payload: e.target.value})\r\n    }\r\n    const cleanFormHandler = e => {\r\n        e.preventDefault()\r\n        dispatch({type: 'CLEAR'})\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal \r\n                show={modal.type !== NotInitializedType} \r\n                backdropClick={backdropClickHandler} \r\n                >\r\n                    {modal.type === FetchingType ? <Loader /> : modal.msg}\r\n            </Modal>\r\n            <div className={styles.ContactData}>\r\n            <h2 className={styles.Title}>INFORMASJON</h2>\r\n            <form onSubmit={(event) => isFormValid ? submitHandler(event) : null}> \r\n                {formInputs}\r\n                <Button type='Success' disabled={!isFormValid}>Send inn</Button>\r\n                <Button type='Neutral' btnCliked={cleanFormHandler}>Reset</Button>\r\n            </form>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ContactData\r\n\r\n","import ContactData from \"./components/ContactData/ContactData\";\r\nexport default ContactData;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'normalize.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__25Fu1\",\"Title\":\"ContactData_Title__23DPR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__3I4XN\",\"Away\":\"Modal_Away__1pVfk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3R_Is\",\"Success\":\"Button_Success__fA7bb\",\"Neutral\":\"Button_Neutral__KmTMf\",\"Danger\":\"Button_Danger__2AQao\"};"],"sourceRoot":""}